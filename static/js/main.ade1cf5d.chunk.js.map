{"version":3,"sources":["features/teamMaker/teamMakerlogic.js","features/teamMaker/teamMakerSlice.js","features/teamMaker/racer.js","features/teamMaker/raceTeams.js","features/teamMaker/teamMaker.js","App.js","app/store.js","serviceWorker.js","index.js"],"names":["k_combinations","set","k","i","j","combs","head","tailcombs","length","push","slice","concat","nthClosest","raceTimesObjArr","goal","teams","usedRacers","closestTimes","arr","b","close","num","map","time","total","closestTime","reduce","prev","curr","Math","abs","combo","indexOf","closest","newArr","filter","includes","racer","findClosestNthTimes","racerObj","teamSize","racers","times","id","raceTimesObj","combos","timesObj","totaledArr","comboTotal","r","totalRaceTimes","minute","Number","second","milSec","tooMS","timesArr","averageRaceTime","msToTime","floor","minuteRemainder","ms","teamMakerSlice","createSlice","name","initialState","reducers","teamSizeChange","state","action","payload","addRacer","deleteRacer","console","log","racerChange","type","value","getTeams","selectRacers","teamMaker","selectTeamSize","selectTeams","actions","Racer","useSelector","dispatch","useDispatch","handleRacerChange","target","element","onChange","e","onClick","Teams","team","TeamMaker","className","handleGetTeams","App","store","configureStore","reducer","teamMakerReducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ade1cf5d.chunk.js","sourcesContent":["const times = [\n    {id: 0, time:'15:10.60'},\n    {id: 1, time:'13:50.26'},\n    {id: 2, time:'15:21.63'},\n    {id: 3, time:'15:26.97'},\n    {id: 4, time:'13:18.59'},\n    {id: 5, time:'13:05.25'},\n    {id: 6, time:'13:36.18'},\n    {id: 7, time:'14:25.68'},\n    {id: 8, time:'15:24.15'}\n]\n\nfunction k_combinations(set, k) {\n\tvar i, j, combs, head, tailcombs;\n\tif (k > set.length || k <= 0) {\n\t\treturn [];\n\t}\n\tif (k === set.length) {\n\t\treturn [set];\n\t}\n\tif (k === 1) {\n\t\tcombs = [];\n\t\tfor (i = 0; i < set.length; i++) {\n\t\t\tcombs.push([set[i]]);\n\t\t}\n\t\treturn combs;\n\t}\n\tcombs = [];\n\n\tfor (i = 0; i < set.length - k + 1; i++) {\n\t\thead = set.slice(i, i + 1);\n\t\ttailcombs = k_combinations(set.slice(i + 1), k - 1);\n\t\tfor (j = 0; j < tailcombs.length; j++) {\n\t\t\tcombs.push(head.concat(tailcombs[j]));\n\t\t}\n\t}\n\treturn combs;\n}\n\nfunction tooMS (arr){\n    let newArr = []\n    arr.map(time => {\n        const minute = Number(time.slice(0,2)) * 60000\n        const second = Number(time.slice(3,5)) * 1000\n        const milSec = Number(time.slice(6))\n        newArr.push(minute + second + milSec)\n    }) \n  return newArr  \n}\n\nfunction totalRaceTimes (combos, timesObj) {\n    const totaledArr = []\n    combos.map(combo => {\n        let comboTotal = 0\n        combo.map(r => {\n            comboTotal += timesObj[r]\n            return ''\n        })\n        totaledArr.push({combo, total:comboTotal})\n        return comboTotal\n    })\n    return totaledArr\n}\n\nfunction averageRaceTime (timesArr) {\n    var total = 0\n    for(let i = 0; i < timesArr.length; i++){\n        total += timesArr[i].total\n    }\n    return total / timesArr.length\n}\n  \n\nfunction closest (raceTimesObjArr, goal, num){\n    let arr = []\n    raceTimesObjArr.map(time => {\n        arr.push(time.total)\n    })\n    const closestTime =  arr.reduce((prev, curr) => {\n        return (Math.abs(curr - goal) < Math.abs(prev - goal) ? curr : prev)\n    })\n    return {combo: raceTimesObjArr[arr.indexOf(closestTime)].combo ,total:closestTime, num}\n}\n\nfunction nthClosest (raceTimesObjArr, goal, teams){\n    const usedRacers = []\n    const closestTimes = []\n    let arr = raceTimesObjArr\n    let b = 0\n\n\n\n    for(let i = 0; i < teams; i){\n        const close = closest(arr, goal, b)\n        const newArr = arr.filter(time => time.total !== close.total)\n        arr = newArr\n        b++\n\n        if(!usedRacers.includes(close.combo[0]) && !usedRacers.includes(close.combo[1]) && !usedRacers.includes(close.combo[2])) {\n            close.combo.map(racer => usedRacers.push(racer))\n            closestTimes.push(close)\n            i++\n        }\n    }\n    return closestTimes\n}\n\nexport function findClosestNthTimes (racerObj, teamSize) {\n\n\n    let racers = []\n    let times = []\n\n    racerObj.map(racer => {\n        racers.push(racer.id)\n        times.push(racer.time)\n    })\n\n    const combinations = k_combinations(racers, teamSize)\n    const ms = tooMS(times)\n\n    const raceTimesObj = totalRaceTimes(combinations ,ms)\n    const raceTimesAverage = averageRaceTime(raceTimesObj)\n\n    //console.log(raceTimesObj)\n    //console.log(raceTimesAverage)\n\n    return nthClosest(raceTimesObj, raceTimesAverage, teamSize)\n}\n\nexport function msToTime (time) {\n    const minute = Math.floor(Number(time) / 60000)\n    const minuteRemainder =Number(time) % 60000\n\n    const second = Math.floor(minuteRemainder / 1000)\n    const ms = minuteRemainder % 1000\n\n    return `${minute}:${second}.${ms}`\n}","import { createSlice } from \"@reduxjs/toolkit\";\nimport { findClosestNthTimes } from \"./teamMakerlogic\";\n\nconst initialState = {\n    teamSize: 3,\n    racers: [\n        {\n        name: '',\n        time: '00:00.00',\n        id: 0}\n    ],\n    teams: []\n}\n\nexport const teamMakerSlice = createSlice ({\n    name: 'teamMaker',\n    initialState,\n    reducers: {\n        teamSizeChange: (state, action) => {\n            state.teamSize = action.payload\n        },\n        addRacer: (state, action) => {\n            state.racers.push({\n                name: \"\",\n                time: '00:00.00',\n                id: state.racers.length\n            })\n        },\n        deleteRacer: (state, action) => {\n            console.log(action.payload)\n            state.racers = [\n                ...state.racers.slice(0, action.payload),\n                ...state.racers.slice(action.payload + 1)]\n        },\n        racerChange: (state, action) => {\n            const type = action.payload.type\n            const value = action.payload.value\n            const num = action.payload.num\n            state.racers[num][type] = value\n        },\n        getTeams: (state, action) => {\n            \n            state.teams = action.payload\n        }\n    }\n})\n\nexport const selectRacers = state => state.teamMaker.racers\nexport const selectTeamSize = state => state.teamMaker.teamSize\nexport const selectTeams = state => state.teamMaker.teams\n\nexport const { addRacer, racerChange, deleteRacer, getTeams, teamSizeChange } = teamMakerSlice.actions\n\nexport default teamMakerSlice.reducer","import React from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\nimport { deleteRacer, racerChange, selectRacers } from './teamMakerSlice'\n\nfunction Racer() {\n    const racers = useSelector(selectRacers)\n    const dispatch = useDispatch()\n\n    function handleRacerChange (num, type, value) {\n        const payload = {\n            type,\n            num,\n            value: value.target.value\n        }\n        dispatch(racerChange(payload))\n    }\n\n    return (\n        <div>\n            {   \n            racers.map( (element, i) => {\n                return(\n                    <div key={i}>\n                        <label>\n                            Name: <input type=\"text\" onChange ={e => handleRacerChange(i, 'name', e)} value={racers[i].name}></input>\n                        </label>\n                        <label>\n                            Time (mm:ss.ms): <input type=\"text\" onChange ={e => handleRacerChange(i, 'time', e)} value={racers[i].time}></input>\n                        </label>\n                        <button onClick = {() => dispatch(deleteRacer(i))}>Delete</button>\n                    </div>\n                    )\n                })\n            }\n        </div>\n    )\n}\n\nexport default Racer","import React from 'react'\nimport { useSelector } from 'react-redux'\nimport { selectRacers, selectTeams } from './teamMakerSlice'\nimport { msToTime } from './teamMakerlogic'\n\nfunction Teams() {\n    const teams = useSelector(selectTeams)\n    const racers = useSelector(selectRacers)\n\n    return(\n        <div>\n            {\n                teams.map((team, i) => {\n                    return(\n                        <div key={i}>\n                            <h3>Team: {i + 1} Total Time: {msToTime(team.total)}</h3>\n                            {\n                                team.combo.map((racer, j) => {\n                                    return (\n                                    <div key={j}>\n                                        <h4>{racers[racer].name} - {racers[racer].time}</h4>\n                                    </div>\n                                    )\n                                })\n                            }\n                        </div>\n                    )\n                })\n            }\n        </div>\n    )\n}\n\nexport default Teams","import React from 'react'\nimport {useDispatch, useSelector} from 'react-redux'\nimport Racer from './racer'\nimport Teams from './raceTeams'\nimport { findClosestNthTimes } from './teamMakerlogic'\nimport { addRacer, getTeams, selectRacers, selectTeamSize, teamSizeChange } from './teamMakerSlice'\n\n\nfunction TeamMaker() {\n    const dispatch = useDispatch()\n    const teamSize = useSelector(selectTeamSize)\n    const racers = useSelector(selectRacers)\n\n    function handleGetTeams () {\n        const teams = findClosestNthTimes(racers, teamSize)\n        dispatch(getTeams(teams))\n    }\n    \n    return (\n        <div>\n            <div className = 'header'>\n                <label>\n                    Team Size:\n                    <input onChange ={e => dispatch(teamSizeChange(e.target.value))} type='number' value = {teamSize}></input>\n                </label>\n            </div>\n            <div className = 'racers'>\n                Racers:\n                    <Racer />\n            </div>\n            <button onClick={() => dispatch(addRacer())}>Add Racer</button>\n            <button onClick={() => handleGetTeams()}>Get Teams</button>\n            <div className = 'teams'>\n            </div>\n            <div className = 'teams'>\n                Teams:\n                <Teams />\n            </div>\n        </div>\n    )\n}\n\nexport default TeamMaker","import React from 'react';\n\nimport TeamMaker from './features/teamMaker/teamMaker';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n        <TeamMaker />\n    </div>\n  );\n}\n\nexport default App;\n","import { configureStore } from '@reduxjs/toolkit';\nimport teamMakerReducer from '../features/teamMaker/teamMakerSlice'\n\nexport const store = configureStore({\n  reducer: {\n    teamMaker: teamMakerReducer,\n  },\n});\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { store } from './app/store';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(\n    <React.StrictMode>\n      <Provider store={store}>\n        <App />\n      </Provider>\n    </React.StrictMode>,\n\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}