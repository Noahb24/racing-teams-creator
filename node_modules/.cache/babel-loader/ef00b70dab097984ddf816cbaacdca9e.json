{"ast":null,"code":"const times = [{\n  id: 0,\n  time: '15:10.60'\n}, {\n  id: 1,\n  time: '13:50.26'\n}, {\n  id: 2,\n  time: '15:21.63'\n}, {\n  id: 3,\n  time: '15:26.97'\n}, {\n  id: 4,\n  time: '13:18.59'\n}, {\n  id: 5,\n  time: '13:05.25'\n}, {\n  id: 6,\n  time: '13:36.18'\n}, {\n  id: 7,\n  time: '14:25.68'\n}, {\n  id: 8,\n  time: '15:24.15'\n}];\n\nfunction k_combinations(set, k) {\n  var i, j, combs, head, tailcombs;\n\n  if (k > set.length || k <= 0) {\n    return [];\n  }\n\n  if (k === set.length) {\n    return [set];\n  }\n\n  if (k === 1) {\n    combs = [];\n\n    for (i = 0; i < set.length; i++) {\n      combs.push([set[i]]);\n    }\n\n    return combs;\n  }\n\n  combs = [];\n\n  for (i = 0; i < set.length - k + 1; i++) {\n    head = set.slice(i, i + 1);\n    tailcombs = k_combinations(set.slice(i + 1), k - 1);\n\n    for (j = 0; j < tailcombs.length; j++) {\n      combs.push(head.concat(tailcombs[j]));\n    }\n  }\n\n  return combs;\n}\n\nfunction tooMS(arr) {\n  let newArr = [];\n  arr.map(time => {\n    const minute = Number(time.slice(0, 2)) * 60000;\n    const second = Number(time.slice(3, 5)) * 1000;\n    const milSec = Number(time.slice(6));\n    newArr.push(minute + second + milSec);\n  });\n  return newArr;\n}\n\nfunction totalRaceTimes(combos, timesObj) {\n  const totaledArr = [];\n  combos.map(combo => {\n    let comboTotal = 0;\n    combo.map(r => {\n      comboTotal += timesObj[r];\n      return '';\n    });\n    totaledArr.push({\n      combo,\n      total: comboTotal\n    });\n    return comboTotal;\n  });\n  return totaledArr;\n}\n\nfunction averageRaceTime(timesArr) {\n  var total = 0;\n\n  for (let i = 0; i < timesArr.length; i++) {\n    total += timesArr[i].total;\n  }\n\n  return total / timesArr.length;\n}\n\nfunction closest(raceTimesObjArr, goal, num) {\n  let arr = [];\n  raceTimesObjArr.map(time => {\n    arr.push(time.total);\n  });\n  const closestTime = arr.reduce((prev, curr) => {\n    return Math.abs(curr - goal) < Math.abs(prev - goal) ? curr : prev;\n  });\n  return {\n    combo: raceTimesObjArr[arr.indexOf(closestTime)].combo,\n    total: closestTime,\n    num\n  };\n}\n\nfunction nthClosest(raceTimesObjArr, goal, teams) {\n  const usedRacers = [];\n  const closestTimes = [];\n  let arr = raceTimesObjArr;\n  let b = 0;\n\n  for (let i = 0; i < teams; i) {\n    const close = closest(arr, goal, b);\n    const newArr = arr.filter(time => time.total !== close.total);\n    arr = newArr;\n    b++;\n\n    if (!usedRacers.includes(close.combo[0]) && !usedRacers.includes(close.combo[1]) && !usedRacers.includes(close.combo[2])) {\n      close.combo.map(racer => usedRacers.push(racer));\n      closestTimes.push(close);\n      i++;\n    }\n  }\n\n  return closestTimes;\n}\n\nexport function findClosestNthTimes(racerObj, teamSize) {\n  let racers = [];\n  let times = [];\n  racerObj.map(racer => {\n    racers.push(racer.id);\n    times.push(racer.time);\n  });\n  const combinations = k_combinations(racers, teamSize);\n  const ms = tooMS(times);\n  const raceTimesObj = totalRaceTimes(combinations, ms);\n  const raceTimesAverage = averageRaceTime(raceTimesObj); //console.log(raceTimesObj)\n  //console.log(raceTimesAverage)\n\n  return nthClosest(raceTimesObj, raceTimesAverage, teamSize);\n}\nexport function msToTime(time) {\n  const minute = Math.floor(time / 60000);\n  const minuteRemainder = time % 60000;\n  const second = Math.floor(minuteRemainder / 1000);\n  const ms = minuteRemainder % 1000;\n  return `${minute}:${second}.${ms}`;\n}\nconsole.log(msToTime(3005691));","map":{"version":3,"sources":["/Users/noahblochowitz/Documents/Projects/racingTeams/team-creator/src/features/teamMaker/teamMakerlogic.js"],"names":["times","id","time","k_combinations","set","k","i","j","combs","head","tailcombs","length","push","slice","concat","tooMS","arr","newArr","map","minute","Number","second","milSec","totalRaceTimes","combos","timesObj","totaledArr","combo","comboTotal","r","total","averageRaceTime","timesArr","closest","raceTimesObjArr","goal","num","closestTime","reduce","prev","curr","Math","abs","indexOf","nthClosest","teams","usedRacers","closestTimes","b","close","filter","includes","racer","findClosestNthTimes","racerObj","teamSize","racers","combinations","ms","raceTimesObj","raceTimesAverage","msToTime","floor","minuteRemainder","console","log"],"mappings":"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","sourcesContent":["const times = [\n    {id: 0, time:'15:10.60'},\n    {id: 1, time:'13:50.26'},\n    {id: 2, time:'15:21.63'},\n    {id: 3, time:'15:26.97'},\n    {id: 4, time:'13:18.59'},\n    {id: 5, time:'13:05.25'},\n    {id: 6, time:'13:36.18'},\n    {id: 7, time:'14:25.68'},\n    {id: 8, time:'15:24.15'}\n]\n\nfunction k_combinations(set, k) {\n\tvar i, j, combs, head, tailcombs;\n\tif (k > set.length || k <= 0) {\n\t\treturn [];\n\t}\n\tif (k === set.length) {\n\t\treturn [set];\n\t}\n\tif (k === 1) {\n\t\tcombs = [];\n\t\tfor (i = 0; i < set.length; i++) {\n\t\t\tcombs.push([set[i]]);\n\t\t}\n\t\treturn combs;\n\t}\n\tcombs = [];\n\n\tfor (i = 0; i < set.length - k + 1; i++) {\n\t\thead = set.slice(i, i + 1);\n\t\ttailcombs = k_combinations(set.slice(i + 1), k - 1);\n\t\tfor (j = 0; j < tailcombs.length; j++) {\n\t\t\tcombs.push(head.concat(tailcombs[j]));\n\t\t}\n\t}\n\treturn combs;\n}\n\nfunction tooMS (arr){\n    let newArr = []\n    arr.map(time => {\n        const minute = Number(time.slice(0,2)) * 60000\n        const second = Number(time.slice(3,5)) * 1000\n        const milSec = Number(time.slice(6))\n        newArr.push(minute + second + milSec)\n    }) \n  return newArr  \n}\n\nfunction totalRaceTimes (combos, timesObj) {\n    const totaledArr = []\n    combos.map(combo => {\n        let comboTotal = 0\n        combo.map(r => {\n            comboTotal += timesObj[r]\n            return ''\n        })\n        totaledArr.push({combo, total:comboTotal})\n        return comboTotal\n    })\n    return totaledArr\n}\n\nfunction averageRaceTime (timesArr) {\n    var total = 0\n    for(let i = 0; i < timesArr.length; i++){\n        total += timesArr[i].total\n    }\n    return total / timesArr.length\n}\n  \n\nfunction closest (raceTimesObjArr, goal, num){\n    let arr = []\n    raceTimesObjArr.map(time => {\n        arr.push(time.total)\n    })\n    const closestTime =  arr.reduce((prev, curr) => {\n        return (Math.abs(curr - goal) < Math.abs(prev - goal) ? curr : prev)\n    })\n    return {combo: raceTimesObjArr[arr.indexOf(closestTime)].combo ,total:closestTime, num}\n}\n\nfunction nthClosest (raceTimesObjArr, goal, teams){\n    const usedRacers = []\n    const closestTimes = []\n    let arr = raceTimesObjArr\n    let b = 0\n\n\n\n    for(let i = 0; i < teams; i){\n        const close = closest(arr, goal, b)\n        const newArr = arr.filter(time => time.total !== close.total)\n        arr = newArr\n        b++\n\n        if(!usedRacers.includes(close.combo[0]) && !usedRacers.includes(close.combo[1]) && !usedRacers.includes(close.combo[2])) {\n            close.combo.map(racer => usedRacers.push(racer))\n            closestTimes.push(close)\n            i++\n        }\n    }\n    return closestTimes\n}\n\nexport function findClosestNthTimes (racerObj, teamSize) {\n\n\n    let racers = []\n    let times = []\n\n    racerObj.map(racer => {\n        racers.push(racer.id)\n        times.push(racer.time)\n    })\n\n    const combinations = k_combinations(racers, teamSize)\n    const ms = tooMS(times)\n\n    const raceTimesObj = totalRaceTimes(combinations ,ms)\n    const raceTimesAverage = averageRaceTime(raceTimesObj)\n\n    //console.log(raceTimesObj)\n    //console.log(raceTimesAverage)\n\n    return nthClosest(raceTimesObj, raceTimesAverage, teamSize)\n}\n\nexport function msToTime (time) {\n    const minute = Math.floor(time / 60000)\n    const minuteRemainder = time % 60000\n\n    const second = Math.floor(minuteRemainder / 1000)\n    const ms = minuteRemainder % 1000\n\n    return `${minute}:${second}.${ms}`\n}\n\nconsole.log(msToTime(3005691))"]},"metadata":{},"sourceType":"module"}